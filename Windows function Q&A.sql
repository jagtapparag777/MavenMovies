-- 1. Rank the customers based on the total amount they've spent on rentals.
SELECT 
    customer_id, 
    SUM(amount) AS total_spent, 
    RANK() OVER (ORDER BY SUM(amount) DESC) AS rank
FROM payment
GROUP BY customer_id;

-- 2. Calculate the cumulative revenue generated by each film over time.
SELECT 
    f.film_id, 
    f.title, 
    p.payment_date, 
    SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM payment p
JOIN rental r ON p.rental_id = r.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id;

-- 3. Determine the average rental duration for each film, considering films with similar lengths.
SELECT 
    f.film_id, 
    f.title, 
    f.length, 
    AVG(DATEDIFF(r.return_date, r.rental_date)) AS avg_rental_duration,
    AVG(AVG(DATEDIFF(r.return_date, r.rental_date))) OVER (PARTITION BY f.length) AS avg_duration_by_length
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY f.film_id;

-- 4. Identify the top 3 films in each category based on their rental counts.
SELECT 
    fc.category_id, 
    c.name AS category_name, 
    f.film_id, 
    f.title, 
    COUNT(r.rental_id) AS rental_count, 
    RANK() OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS rank
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY fc.category_id, f.film_id
HAVING rank <= 3;

-- 5. Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
SELECT 
    customer_id, 
    COUNT(rental_id) AS total_rentals,
    AVG(COUNT(rental_id)) OVER () AS avg_rentals,
    COUNT(rental_id) - AVG(COUNT(rental_id)) OVER () AS rental_difference
FROM rental
GROUP BY customer_id;

-- 6. Find the monthly revenue trend for the entire rental store over time.
SELECT 
    DATE_FORMAT(payment_date, '%Y-%m') AS month, 
    SUM(amount) AS total_revenue
FROM payment
GROUP BY DATE_FORMAT(payment_date, '%Y-%m')
ORDER BY month;

-- 7. Identify the customers whose total spending on rentals falls within the top 20% of all customers.
WITH customer_spending AS (
    SELECT 
        customer_id, 
        SUM(amount) AS total_spent,
        NTILE(5) OVER (ORDER BY SUM(amount) DESC) AS quintile
    FROM payment
    GROUP BY customer_id
)
SELECT 
    customer_id, 
    total_spent
FROM customer_spending
WHERE quintile = 1;

-- 8. Calculate the running total of rentals per category, ordered by rental count.
SELECT 
    fc.category_id, 
    c.name AS category_name, 
    COUNT(r.rental_id) AS rental_count,
    SUM(COUNT(r.rental_id)) OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id)) AS running_total
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
JOIN film_category fc ON f.film_id = fc.film_id
JOIN category c ON fc.category_id = c.category_id
GROUP BY fc.category_id, f.film_id;

-- 9. Find the films that have been rented less than the average rental count for their respective categories.
WITH film_rental_counts AS (
    SELECT 
        f.film_id, 
        f.title, 
        fc.category_id, 
        COUNT(r.rental_id) AS rental_count,
        AVG(COUNT(r.rental_id)) OVER (PARTITION BY fc.category_id) AS avg_rental_count
    FROM rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN film_category fc ON f.film_id = fc.film_id
    GROUP BY f.film_id, fc.category_id
)
SELECT 
    film_id, 
    title, 
    rental_count, 
    avg_rental_count
FROM film_rental_counts
WHERE rental_count < avg_rental_count;

-- 10. Identify the top 5 months with the highest revenue and display the revenue generated in each month.
WITH monthly_revenue AS (
    SELECT 
        DATE_FORMAT(payment_date, '%Y-%m') AS month, 
        SUM(amount) AS total_revenue
    FROM payment
    GROUP BY DATE_FORMAT(payment_date, '%Y-%m')
)
SELECT 
    month, 
    total_revenue
FROM monthly_revenue
ORDER BY total_revenue DESC
LIMIT 5;
